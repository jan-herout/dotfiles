#!/bin/bash

# source all libs
source_dirs=(
    "$HOME/bin/lib"
    "$HOME/bin/init"
    "$HOME/bin/init/completions"
)

# loop via all source_dirs, identify all shell scripts and source them
for dir in "${source_dirs[@]}"; do
    if [[ -d $dir ]]; then
        for f in "$dir"/*.sh; do
            [[ -r $f ]] && [[ -f $f ]] && source "$f"
        done
    fi
done

export OMB_CASE_SENSITIVE=false         # case insensitive completion and globbing
export OMB_HYPHEN_SENSITIVE=false       # hyphen and underscore are equivalent in completion


export PS1="]0;jan@blacktux:/home/jan/o2-feature/bidev-8829-ebox-views/data\\n\[\e[0;36m\]â”Œâ”€\[\e[97;1m\][\u@\h]\[\e[0;36m\]â”€\[\e[33;1m\](\w)\n\[\e[0;36m\]â””â”€\[\e[32;1m\][\A]\[\e[0;36m\]-\[\e[32;1m\](\[\e[0;32m\]^_^\[\e[32;1m\])\[\e[0;36m\]-\[\e[36;1m\][\[\e[0;32m\]\[\e[32;1m\]$\[\e[36;1m\]]\[\e[0;32m\] "
export PATH=$PATH:~/bin:~/sbin:~/.local/bin

# golang
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:~/go/bin
export ORACLE_HOME=/home/jan/sbin/instantclient_23_6
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ORACLE_HOME
export PATH=$PATH:$HOME/sbin/instantclient_23_6
export EDITOR=nvim

# press generator, pro init
export PRESS_MODEL_DIR=/home/jan/o2/BIDEV-MAIN_bimeta/press/models.lin
export PRESS_VIEW_DIR=/home/jan/o2/BIDEV-MAIN_bimeta/press
export PRESS_PROFILE_DIR=/home/jan/o2/BIDEV-MAIN_bimeta/press/profiles.lin
export PRESS_PDC_METADATA_FILE=/home/jan/o2/BIDEV-MAIN_bimeta/ModelMetadata/PDCMetadata.json
export PRESS_PRODUCTION_DDL_DIR=/home/jan/o2/svn-production/db/Teradata/DDL

# azure functions
export FUNCTIONS_CORE_TOOLS_TELEMETRY_OPTOUT=1

#################################
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

eval "$(pyenv virtualenv-init -)"
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"


if command -v fzf &>/dev/null
then   
    # use fdfind instead of find
    if command -v fdfind &>/dev/null
    then
        export FZF_DEFAULT_COMMAND="fdfind --hidden --strip-cwd-prefix --exclude .git --no-ignore-vcs"
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
        export FZF_ALT_C_COMMAND="fdfind --type=d --hidden --strip-cwd-prefix --exclude .git --no-ignore-vcs -d 2"

        # use fdfind to list path candidates
        _fzf_compgen_path() {
            fdfind --hidden --exclude .git . "$1"
        }

        # use fdfind to generate list for dir completion
        _fzf_compgen_dir() {
            fdfind --type=d --hidden --exclude -git . "$1"
        }
    fi

    # use batcat and eza for preview in fzf
    if command -v batcat &>/dev/null; then
        # export MANPAGER="bash -c 'col -bx | batcat -l man -p'" # colorized man
        # export MANPAGER=less # fallback
        export MANPAGER="sh -c 'sed -u -e \"s/\\x1B\\[[0-9;]*m//g; s/.\\x08//g\" | batcat -p -l man'"
        export FZF_CTRL_T_OPTS="--preview 'batcat -n --color=always --line-range :500 {}'"

        help() {
            "$@" --help 2>&1 | batcat --plain 
        }
    fi

    if command -v eza &>/dev/null; then
        export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"
    fi

    fzf_kill() {
        if [[ $(uname) == Linux ]]; then
            local pids=$(ps -f -u $USER | sed 1d | fzf | awk '{print $2}')
        elif [[ $(uname) == Darwin ]]; then
            local pids=$(ps -f -u $USER | sed 1d | fzf | awk '{print $3}')
        else
            echo 'Error: unknown platform'
            return
        fi
        if [[ -n "$pids" ]]; then
            echo "$pids" | xargs kill -9 "$@"
        fi
    }
fi

proxy () {
    source ~/bin/set-proxy
}



# nvm a node.js
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# azure
export ACR_REGISTRY="o2czbidevacr"
#!/bin/bash
# colors
MM_ERR="\e[31mERR\e[0m"
MM_TRY="\033[33mTRY\033[0m"
MM_OK="\033[34mOK\033[0m "

export PATH=$PATH:~/bin:~/sbin:~/.local/bin

# golang
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:~/go/bin

export LD_LIBRARY_PATH=$HOME/sbin/$PWD/usr/lib/oracle/21/client64/lib:$LD_LIBRARY_PATH
export PATH=$PWD/usr/lib/oracle/21/client64/bin:$PATH
export ORACLE_HOME=/home/jan/sbin/instantclient_23_6
export EDITOR=nvim


export PRESS_MODEL_DIR=/home/jan/o2/bimeta/press/models.lin
export PRESS_VIEW_DIR=/home/jan/o2/bimeta/press
export PRESS_PROFILE_DIR=/home/jan/o2/bimeta/press/profiles.lin
export PRESS_PDC_METADATA_FILE=/home/jan/o2/bimeta/ModelMetadata/PDCMetadata.json
export PRESS_PRODUCTION_DDL_DIR=/home/jan/o2/svn-production/db/Teradata/DDL


#################################
# pyenv
# Load pyenv automatically by appending
# the following to
# ~/.bash_profile if it exists, otherwise ~/.profile (for login shells)
# and ~/.bashrc (for interactive shells) :

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

eval "$(pyenv virtualenv-init -)"
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# python settings
alias flake8="flake8 --max-line-length=88"
# export PYTHONPATH="/home/jan/o2/py-o2edw"

# ph completions
source '/home/jan/.bash_completions/ph.sh'

# zoxide a fzf
eval "$(zoxide init bash)"


# _fzf_comprun() {
#     local command=$1
#     shift
#     case "$command" in
#         cd)           fzf --preview 'tree -C {} | head -200'   "$@" ;;
#         export|unset) fzf --preview "eval 'echo \$'{}"         "$@" ;;
#         ssh)          fzf --preview 'dig {}'                   "$@" ;;
#         *)            fzf --preview 'bat -n --color=always {}' "$@" ;;
#         # cd)         	fzf --preview 'eza --tree --color=always {} | head -200' "$@" ;;
#         # export|unset)	fzf --preview "eval 'echo \$' {}"	"$@" ;;
#         # ssh)		    fzf --preview 'dig {}'			"$@" ;;
#         # cp)             find $HOME -type f | fzf --preview "'batcat -n --color=always --line-range :500 {}'" "$@" ;;
#         # *)		        fzf --preview "'batcat -n --color=always --line-range :500 {}'" "$@" ;;
#     esac
# }

if command -v fzf &>/dev/null
then
    [ -f /usr/share/doc/fzf/examples/key-bindings.bash ] && source /usr/share/doc/fzf/examples/key-bindings.bash
    [ -f /usr/share/doc/fzf/examples/completion.bash ] && source /usr/share/doc/fzf/examples/completion.bash

    # use fdfind instead of find
    if command -v fdfind &>/dev/null
    then
        export FZF_DEFAULT_COMMAND="fdfind --hidden --strip-cwd-prefix --exclude .git --no-ignore-vcs"
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
        export FZF_ALT_C_COMMAND="fdfind --type=d --hidden --strip-cwd-prefix --exclude .git --no-ignore-vcs"

        # use fdfind to list path candidates
        _fzf_compgen_path() {
            fdfind --hidden --exclude .git . "$1"
        }

        # use fdfind to generate list for dir completion
        _fzf_compgen_dir() {
            fdfind --type=d --hidden --exclude -git . "$1"
        }
    fi

    # use batcat and eza for preview in fzf
    if command -v batcat &>/dev/null; then
        export MANPAGER="bash -c 'col -bx | batcat -l man -p'" # colorized man
        export FZF_CTRL_T_OPTS="--preview 'batcat -n --color=always --line-range :500 {}'"

        help() {
            "$@" --help 2>&1 | batcat --plain 
        }
    fi

    if command -v eza &>/dev/null; then
        export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"
    fi

    fzf_find_edit() {
        local file=$(
        find . -type f | fzf --query="$1" --no-multi --select-1 --exit-0 \
            --preview 'batcat --color=always --line-range :500 {}'
        )
        if [[ -n "$file" ]]; then
            $EDITOR "$file"
        fi
    }
    alias fe="fzf_find_edit"

    fzf_kill() {
        if [[ $(uname) == Linux ]]; then
            local pids=$(ps -f -u $USER | sed 1d | fzf | awk '{print $2}')
        elif [[ $(uname) == Darwin ]]; then
            local pids=$(ps -f -u $USER | sed 1d | fzf | awk '{print $3}')
        else
            echo 'Error: unknown platform'
            return
        fi
        if [[ -n "$pids" ]]; then
            echo "$pids" | xargs kill -9 "$@"
        fi
    }

    alias fkill='fzf_kill'


    # lf který po skončení jde do aktivního adresáře
    lfcd() {
        tmp="$(mktemp)"
        lf -last-dir-path="$tmp" "$@"
        if [ -f "$tmp" ]; then
            dir="$(cat "$tmp")"
            rm -f "$tmp"
            if [ -d "$dir" ]; then
                if [ "$dir" != "$(pwd)" ]; then
                    cd "$dir"
                fi
            fi
        fi
    }
    alias lf="lfcd"

    fzf_git_add() {
        local selections=$(
        git ls-files -m -o --exclude-standard | \
            fzf \
            --ansi \
            --preview 'if (git ls-files --error-unmatch {1} &>/dev/null); then
                    git diff --color=always {1}
                else
                    batcat --color=always --line-range :500 {1}
                    fi'
        )
        if [[ -n $selections ]]; then
            git add --verbose $selections
        fi
    }

    alias gadd='fzf_git_add'

    fzf_git_log() {
                local selection=$(
                git ll --color=always "$@" | \
                    fzf --no-multi --ansi --no-sort --no-height \
                    --preview "echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
                    xargs -I@ sh -c 'git show --color=always @'"
                )
                if [[ -n $selection ]]; then
                    local commit=$(echo "$selection" | sed 's/^[* |]*//' | awk '{print $1}' | tr -d '\n')
                    git show $commit
                fi
            }

            alias gll='fzf_git_log'

            fzf_git_reflog() {
                local selection=$(
                git reflog --color=always "$@" |
                    fzf --no-multi --ansi --no-sort --no-height \
                    --preview "git show --color=always {1}"
                )
                if [[ -n $selection ]]; then
                    git show $(echo $selection | awk '{print $1}')
                fi
            }

            alias grl='fzf_git_reflog'

            fzf_git_branch() {
                local selection=$(git branch | fzf --no-multi --ansi --no-sort --no-height)
                if [[ -n $selection ]]; then 
                    git checkout $selection
                fi
            }

            alias gcb='fzf_git_branch'
fi


# batcat
if command -v batcat &>/dev/null
then
    alias bat="batcat"
fi

# eza
if command -v eza &>/dev/null
then
    alias ll="/usr/bin/ls -lA"
    alias la="/usr/bin/ls -A"
    alias l="eza --color=always --long -b --icons  --no-user --no-permissions -h --time-style='+%Y-%m-%d %H:%M:%S'"
fi

# proxy functions
proxon () {
    source ~/bin/set-proxy-on
}

proxoff () {
    source ~/bin/set-proxy-off
}

teams () {
    # source ~/bin/set-proxy-on
    # firefox --private-window  "https://teams.microsoft.com/v2/?clientexperience=t2&ring=ring3_6" >/dev/null 2>/dev/null  &
    google-chrome "https://teams.microsoft.com/v2/?clientexperience=t2&ring=ring3_6" >/dev/null 2>/dev/null  &
}

move-to-bookmark () {
    source "$HOME/bin/fcd-script"
}

# nvm a node.js
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


__config__ () {
    local CWD=$(pwd)
    cd ~/dotfiles 
    nvim .bashrc_addons 
    cd $CWD  
}

# lf icons
export LF_ICONS=$(cat $HOME/.config/lf/icons)

# aliases
alias vim="nvim"
alias v="vim"
alias cls="clear"
#alias notes="export __CWD__=`pwd` && cd ~/logseq && nvim &&  cd $__CWD__  && unset __CWD__"
alias gac="git add --all && git commit"
alias ga="git add --all"
alias gp="git pull --rebase && git push"
alias gs="git status"
alias ..="cd .."
alias ...="cd .. && cd .."
alias src="source ~/.bashrc"
alias vc="export __CWD__=`pwd` && cd ~/dotfiles/.config/nvim && nvim . &&  cd $__CWD__  && unset __CWD__"
alias nom="$HOME/bin/netmount"
alias num="$HOME/bin/netumount"
alias gs="git status"
alias config="__config__"
#alias s402="ssh x0548834@ntinfot404.to2.to2cz.cz && clear"
alias f="source $HOME/bin/fcd-script"
alias m="source $HOME/bin/fcd-script"

# clipboard operations
alias wcl="wl-copy"
alias xcl="xclip -selection clipboard"

# perlbrew: https://perlbrew.pl/
source $HOME/perl5/perlbrew/etc/bashrc
export PERL5LIB=$HOME/o2/bimain/mstr/SRC/Shared_Libs/Perl.O2

# azure
export ACR_REGISTRY="o2czbidevacr"


# perlbrew
perlbrew use perl-5.24.4

#!/bin/bash

# colors
ERR="\e[31mERR\e[0m"
TRY="\033[33mTRY\033[0m"
OK="\033[34mOK\033[0m "


# test if the curent dir is already agit repo, find .git
if [ ! -d ".git" ]; then
    echo -e "$ERR: current directory is NOT a git repo"
    exit 1
fi


# path
PAT_FILE=$HOME/Vaults/o2/github/jan_herout_pat

# kontrola existence secrets souboru a mount vaultu
echo -e "$TRY: test secrets file: $PAT_FILE"
if [ ! -f "$PAT_FILE" ]; then
    echo -e "$TRY: File does not exist: $PAT_FILE"
    cryfs $HOME/.local/share/plasma-vault/o2.enc $HOME/Vaults/o2/
fi

# pokud ani potom neexistuje, bail
if [ ! -f "$PAT_FILE" ]; then
    echo -e "$ERR: File does not exist: $PAT_FILE"
    exit 1
fi

# split the line into name and value, separator is space
GITHUB_TOKEN=$(cat $PAT_FILE | fzf)
GITHUB_TOKEN=$(echo $GITHUB_TOKEN | cut -d' ' -f2)

if [[ -z "$GITHUB_TOKEN" ]]; then
    echo -e "$ERR: No github token provided, bail out"
    exit 1
fi


# remove the remote
git remote remove origin
if [ $? -ne 0 ]; then
    echo -e "$ERR: failed to remove origin for the repo: $GITHUB_ADDRESS"
    echo -e "$TRY: do you want to continue? Press Ctrl+C to cancel or ENTER to continue"
    read -r
fi


# test if the address is in clipboard
echo -e "$TRY: try to get address from the clipboard"
CLIPBOARD=$(xclip -o)

# test it the CLIPBOARD contains multiline string
if [[ $CLIPBOARD =~ $'\n' ]]; then
    CLIPBOARD=""    
fi
if [[ ! $CLIPBOARD =~ ^https:// ]]; then
    CLIPBOARD=""
fi
if [[ ! $CLIPBOARD =~ \.git$ ]]; then
    CLIPBOARD=""
fi
if [[ -z $CLIPBOARD ]]; then
    echo -e "$TRY: clipboard does not contain a valid github address, please provide it manually"
else
    echo -e "$OK: clipboard contains a valid github address: $CLIPBOARD"
fi

# ask the user what github address to clone
read -p "Enter the github address to clone, ENTER to use the default" GITHUB_ADDRESS
if [ -z "$GITHUB_ADDRESS" ]; then
    echo -e "$TRY: No github address provided, using address from clipboard: $CLIPBOARD"
    GITHUB_ADDRESS=$CLIPBOARD
fi

# test that the address starts with https://
if [[ ! $GITHUB_ADDRESS =~ ^https:// ]]; then
    echo -e "$ERR: Address does not start with https://"
    exit 1
fi

# test that the address ends with .git
if [[ ! $GITHUB_ADDRESS =~ \.git$ ]]; then
    echo -e "$ERR: Address does not end with .git"
    exit 1
fi

echo -e "$OK: github address provided: $GITHUB_ADDRESS"


# the address is in the form: https://github.com/jan-herout_o2cz/test-repo.git
# we need it to be in the form https://$GITHUB_TOKEN@github.com/jan-herout_o2cz/test-repo.git
GITHUB_ADDRESS=${GITHUB_ADDRESS/https:\/\//https:\/\/$GITHUB_TOKEN@}

# read the address of the proxy server
O2_USERNAME=""
O2_PASSWORD=""
O2_USERNAME_FILE=$HOME/Vaults/o2/o2_username.txt
O2_PASSWORD_FILE=$HOME/Vaults/o2/o2_password.txt

if ! test -f $O2_USERNAME_FILE; then
  echo -e "$ERR: File does not exist: $O2_USERNAME_FILE"
  exit 1
fi

if ! test -f $O2_PASSWORD_FILE; then
  echo -e "$ERR: File does not exist: $O2_USERNAME_FILE"
  exit 1
fi

echo -e "$TRY: seting proxy, reading file: $O2_USERNAME_FILE"
echo -e "$TRY: seting proxy, reading file: $O2_PASSWORD_FILE"

O2_USERNAME=$(cat $O2_USERNAME_FILE)
O2_PASSWORD=$(cat $O2_PASSWORD_FILE)
O2_PROXY="internet-proxy-s1.cz.o2:8080"

echo -e "$OK: Setting proxy to: http://$O2_USERNAME:************@$O2_PROXY"
http_proxy="http://$O2_USERNAME:$O2_PASSWORD@$O2_PROXY"


git remote add origin $GITHUB_ADDRESS
if [ $? -ne 0 ]; then
    echo -e "$ERR: failed to add a new origin for the repo: $GITHUB_ADDRESS"        
    exit 1
fi

git config --local remote.origin.proxy $http_proxy

cat .git/config